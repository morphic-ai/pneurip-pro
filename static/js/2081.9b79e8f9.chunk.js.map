{"version":3,"file":"static/js/2081.9b79e8f9.chunk.js","mappings":"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","sources":["../node_modules/@capacitor/filesystem/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  AppendFileOptions,\n  CopyOptions,\n  CopyResult,\n  DeleteFileOptions,\n  FilesystemPlugin,\n  GetUriOptions,\n  GetUriResult,\n  MkdirOptions,\n  PermissionStatus,\n  ReadFileOptions,\n  ReadFileResult,\n  ReaddirOptions,\n  ReaddirResult,\n  RenameOptions,\n  RmdirOptions,\n  StatOptions,\n  StatResult,\n  WriteFileOptions,\n  WriteFileResult,\n  Directory,\n} from './definitions';\n\nfunction resolve(path: string): string {\n  const posix = path.split('/').filter(item => item !== '.');\n  const newPosix: string[] = [];\n\n  posix.forEach(item => {\n    if (\n      item === '..' &&\n      newPosix.length > 0 &&\n      newPosix[newPosix.length - 1] !== '..'\n    ) {\n      newPosix.pop();\n    } else {\n      newPosix.push(item);\n    }\n  });\n\n  return newPosix.join('/');\n}\nfunction isPathParent(parent: string, children: string): boolean {\n  parent = resolve(parent);\n  children = resolve(children);\n  const pathsA = parent.split('/');\n  const pathsB = children.split('/');\n\n  return (\n    parent !== children &&\n    pathsA.every((value, index) => value === pathsB[index])\n  );\n}\n\nexport class FilesystemWeb extends WebPlugin implements FilesystemPlugin {\n  DB_VERSION = 1;\n  DB_NAME = 'Disc';\n\n  private _writeCmds: string[] = ['add', 'put', 'delete'];\n  private _db?: IDBDatabase;\n  static _debug = true;\n  async initDb(): Promise<IDBDatabase> {\n    if (this._db !== undefined) {\n      return this._db;\n    }\n    if (!('indexedDB' in window)) {\n      throw this.unavailable(\"This browser doesn't support IndexedDB\");\n    }\n\n    return new Promise<IDBDatabase>((resolve, reject) => {\n      const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n      request.onupgradeneeded = FilesystemWeb.doUpgrade;\n      request.onsuccess = () => {\n        this._db = request.result;\n        resolve(request.result);\n      };\n      request.onerror = () => reject(request.error);\n      request.onblocked = () => {\n        console.warn('db blocked');\n      };\n    });\n  }\n\n  static doUpgrade(event: IDBVersionChangeEvent): void {\n    const eventTarget = event.target as IDBOpenDBRequest;\n    const db = eventTarget.result;\n    switch (event.oldVersion) {\n      case 0:\n      case 1:\n      default: {\n        if (db.objectStoreNames.contains('FileStorage')) {\n          db.deleteObjectStore('FileStorage');\n        }\n        const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n        store.createIndex('by_folder', 'folder');\n      }\n    }\n  }\n\n  async dbRequest(cmd: string, args: any[]): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: any = tx.objectStore('FileStorage');\n        const req = store[cmd](...args);\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  async dbIndexRequest(\n    indexName: string,\n    cmd: string,\n    args: [any],\n  ): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: IDBObjectStore = tx.objectStore('FileStorage');\n        const index: any = store.index(indexName);\n        const req = index[cmd](...args) as any;\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  private getPath(\n    directory: Directory | undefined,\n    uriPath: string | undefined,\n  ): string {\n    const cleanedUriPath =\n      uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n    let fsPath = '';\n    if (directory !== undefined) fsPath += '/' + directory;\n    if (uriPath !== '') fsPath += '/' + cleanedUriPath;\n    return fsPath;\n  }\n\n  async clear(): Promise<void> {\n    const conn: IDBDatabase = await this.initDb();\n    const tx: IDBTransaction = conn.transaction(['FileStorage'], 'readwrite');\n    const store: IDBObjectStore = tx.objectStore('FileStorage');\n    store.clear();\n  }\n\n  /**\n   * Read a file from disk\n   * @param options options for the file read\n   * @return a promise that resolves with the read file data result\n   */\n  async readFile(options: ReadFileOptions): Promise<ReadFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    // const encoding = options.encoding;\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    return { data: entry.content ? entry.content : '' };\n  }\n\n  /**\n   * Write a file to disk in the specified location on device\n   * @param options options for the file write\n   * @return a promise that resolves with the file write result\n   */\n  async writeFile(options: WriteFileOptions): Promise<WriteFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    const encoding = options.encoding;\n    const doRecursive = options.recursive;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: doRecursive,\n        });\n      }\n    }\n\n    if (!encoding) {\n      data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n      if (!this.isBase64String(data))\n        throw Error('The supplied data is not valid base64 content.');\n    }\n\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data.length,\n      ctime: now,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n    return {\n      uri: pathObj.path,\n    };\n  }\n\n  /**\n   * Append to a file on disk in the specified location on device\n   * @param options options for the file append\n   * @return a promise that resolves with the file write result\n   */\n  async appendFile(options: AppendFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    const encoding = options.encoding;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const now = Date.now();\n    let ctime = now;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: true,\n        });\n      }\n    }\n\n    if (!encoding && !this.isBase64String(data))\n      throw Error('The supplied data is not valid base64 content.');\n\n    if (occupiedEntry !== undefined) {\n      if (occupiedEntry.content !== undefined && !encoding) {\n        data = btoa(atob(occupiedEntry.content) + atob(data));\n      } else {\n        data = occupiedEntry.content + data;\n      }\n      ctime = occupiedEntry.ctime;\n    }\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data.length,\n      ctime: ctime,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Delete a file from disk\n   * @param options options for the file delete\n   * @return a promise that resolves with the deleted file data result\n   */\n  async deleteFile(options: DeleteFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n      IDBKeyRange.only(path),\n    ]);\n    if (entries.length !== 0) throw Error('Folder is not empty.');\n\n    await this.dbRequest('delete', [path]);\n  }\n\n  /**\n   * Create a directory.\n   * @param options options for the mkdir\n   * @return a promise that resolves with the mkdir result\n   */\n  async mkdir(options: MkdirOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    const doRecursive = options.recursive;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const depth = (path.match(/\\//g) || []).length;\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (depth === 1) throw Error('Cannot create Root directory');\n    if (occupiedEntry !== undefined)\n      throw Error('Current directory does already exist.');\n    if (!doRecursive && depth !== 2 && parentEntry === undefined)\n      throw Error('Parent directory must exist');\n\n    if (doRecursive && depth !== 2 && parentEntry === undefined) {\n      const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n      await this.mkdir({\n        path: parentArgPath,\n        directory: options.directory,\n        recursive: doRecursive,\n      });\n    }\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'directory',\n      size: 0,\n      ctime: now,\n      mtime: now,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Remove a directory\n   * @param options the options for the directory remove\n   */\n  async rmdir(options: RmdirOptions): Promise<void> {\n    const { path, directory, recursive } = options;\n    const fullPath: string = this.getPath(directory, path);\n\n    const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n\n    if (entry === undefined) throw Error('Folder does not exist.');\n\n    if (entry.type !== 'directory')\n      throw Error('Requested path is not a directory');\n\n    const readDirResult = await this.readdir({ path, directory });\n\n    if (readDirResult.files.length !== 0 && !recursive)\n      throw Error('Folder is not empty');\n\n    for (const entry of readDirResult.files) {\n      const entryPath = `${path}/${entry.name}`;\n      const entryObj = await this.stat({ path: entryPath, directory });\n      if (entryObj.type === 'file') {\n        await this.deleteFile({ path: entryPath, directory });\n      } else {\n        await this.rmdir({ path: entryPath, directory, recursive });\n      }\n    }\n\n    await this.dbRequest('delete', [fullPath]);\n  }\n\n  /**\n   * Return a list of files from the directory (not recursive)\n   * @param options the options for the readdir operation\n   * @return a promise that resolves with the readdir directory listing result\n   */\n  async readdir(options: ReaddirOptions): Promise<ReaddirResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (options.path !== '' && entry === undefined)\n      throw Error('Folder does not exist.');\n\n    const entries: string[] = await this.dbIndexRequest(\n      'by_folder',\n      'getAllKeys',\n      [IDBKeyRange.only(path)],\n    );\n    const files = await Promise.all(\n      entries.map(async e => {\n        let subEntry = (await this.dbRequest('get', [e])) as EntryObj;\n        if (subEntry === undefined) {\n          subEntry = (await this.dbRequest('get', [e + '/'])) as EntryObj;\n        }\n        return {\n          name: e.substring(path.length + 1),\n          type: subEntry.type,\n          size: subEntry.size,\n          ctime: subEntry.ctime,\n          mtime: subEntry.mtime,\n          uri: subEntry.path,\n        };\n      }),\n    );\n    return { files: files };\n  }\n\n  /**\n   * Return full File URI for a path and directory\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async getUri(options: GetUriOptions): Promise<GetUriResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    return {\n      uri: entry?.path || path,\n    };\n  }\n\n  /**\n   * Return data about a file\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async stat(options: StatOptions): Promise<StatResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    if (entry === undefined) throw Error('Entry does not exist.');\n\n    return {\n      type: entry.type,\n      size: entry.size,\n      ctime: entry.ctime,\n      mtime: entry.mtime,\n      uri: entry.path,\n    };\n  }\n\n  /**\n   * Rename a file or directory\n   * @param options the options for the rename operation\n   * @return a promise that resolves with the rename result\n   */\n  async rename(options: RenameOptions): Promise<void> {\n    await this._copy(options, true);\n    return;\n  }\n\n  /**\n   * Copy a file or directory\n   * @param options the options for the copy operation\n   * @return a promise that resolves with the copy result\n   */\n  async copy(options: CopyOptions): Promise<CopyResult> {\n    return this._copy(options, false);\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  /**\n   * Function that can perform a copy or a rename\n   * @param options the options for the rename operation\n   * @param doRename whether to perform a rename or copy operation\n   * @return a promise that resolves with the result\n   */\n  private async _copy(\n    options: CopyOptions,\n    doRename = false,\n  ): Promise<CopyResult> {\n    let { toDirectory } = options;\n    const { to, from, directory: fromDirectory } = options;\n\n    if (!to || !from) {\n      throw Error('Both to and from must be provided');\n    }\n\n    // If no \"to\" directory is provided, use the \"from\" directory\n    if (!toDirectory) {\n      toDirectory = fromDirectory;\n    }\n\n    const fromPath = this.getPath(fromDirectory, from);\n    const toPath = this.getPath(toDirectory, to);\n\n    // Test that the \"to\" and \"from\" locations are different\n    if (fromPath === toPath) {\n      return {\n        uri: toPath,\n      };\n    }\n\n    if (isPathParent(fromPath, toPath)) {\n      throw Error('To path cannot contain the from path');\n    }\n\n    // Check the state of the \"to\" location\n    let toObj;\n    try {\n      toObj = await this.stat({\n        path: to,\n        directory: toDirectory,\n      });\n    } catch (e) {\n      // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n      const toPathComponents = to.split('/');\n      toPathComponents.pop();\n      const toPath = toPathComponents.join('/');\n\n      // Check the containing directory of the \"to\" location exists\n      if (toPathComponents.length > 0) {\n        const toParentDirectory = await this.stat({\n          path: toPath,\n          directory: toDirectory,\n        });\n\n        if (toParentDirectory.type !== 'directory') {\n          throw new Error('Parent directory of the to path is a file');\n        }\n      }\n    }\n\n    // Cannot overwrite a directory\n    if (toObj && toObj.type === 'directory') {\n      throw new Error('Cannot overwrite a directory with a file');\n    }\n\n    // Ensure the \"from\" object exists\n    const fromObj = await this.stat({\n      path: from,\n      directory: fromDirectory,\n    });\n\n    // Set the mtime/ctime of the supplied path\n    const updateTime = async (path: string, ctime: number, mtime: number) => {\n      const fullPath: string = this.getPath(toDirectory, path);\n      const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n      entry.ctime = ctime;\n      entry.mtime = mtime;\n      await this.dbRequest('put', [entry]);\n    };\n\n    const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n\n    switch (fromObj.type) {\n      // The \"from\" object is a file\n      case 'file': {\n        // Read the file\n        const file = await this.readFile({\n          path: from,\n          directory: fromDirectory,\n        });\n\n        // Optionally remove the file\n        if (doRename) {\n          await this.deleteFile({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n\n        // Write the file to the new location\n        const writeResult = await this.writeFile({\n          path: to,\n          directory: toDirectory,\n          data: file.data,\n        });\n\n        // Copy the mtime/ctime of a renamed file\n        if (doRename) {\n          await updateTime(to, ctime, fromObj.mtime);\n        }\n\n        // Resolve promise\n        return writeResult;\n      }\n      case 'directory': {\n        if (toObj) {\n          throw Error('Cannot move a directory over an existing object');\n        }\n\n        try {\n          // Create the to directory\n          await this.mkdir({\n            path: to,\n            directory: toDirectory,\n            recursive: false,\n          });\n\n          // Copy the mtime/ctime of a renamed directory\n          if (doRename) {\n            await updateTime(to, ctime, fromObj.mtime);\n          }\n        } catch (e) {\n          // ignore\n        }\n\n        // Iterate over the contents of the from location\n        const contents = (\n          await this.readdir({\n            path: from,\n            directory: fromDirectory,\n          })\n        ).files;\n\n        for (const filename of contents) {\n          // Move item from the from directory to the to directory\n          await this._copy(\n            {\n              from: `${from}/${filename}`,\n              to: `${to}/${filename}`,\n              directory: fromDirectory,\n              toDirectory,\n            },\n            doRename,\n          );\n        }\n\n        // Optionally remove the original from directory\n        if (doRename) {\n          await this.rmdir({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n      }\n    }\n    return {\n      uri: toPath,\n    };\n  }\n\n  private isBase64String(str: string): boolean {\n    try {\n      return btoa(atob(str)) == str;\n    } catch (err) {\n      return false;\n    }\n  }\n}\n\ninterface EntryObj {\n  path: string;\n  folder: string;\n  type: 'directory' | 'file';\n  size: number;\n  ctime: number;\n  mtime: number;\n  uri?: string;\n  content?: string;\n}\n"],"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","FilesystemWeb","WebPlugin","constructor","DB_VERSION","DB_NAME","_writeCmds","async","undefined","this","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","static","event","db","target","oldVersion","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","createIndex","cmd","args","readFlag","indexOf","initDb","then","conn","req","transaction","objectStore","indexName","index","getPath","directory","uriPath","cleanedUriPath","replace","fsPath","clear","options","entry","dbRequest","Error","data","content","encoding","doRecursive","recursive","occupiedEntry","type","parentPath","substr","lastIndexOf","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","uri","btoa","atob","dbIndexRequest","IDBKeyRange","only","depth","match","parentEntry","fullPath","readDirResult","readdir","files","entryPath","name","stat","deleteFile","rmdir","entries","all","map","subEntry","e","substring","_copy","publicStorage","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","parent","children","pathsA","pathsB","every","value","isPathParent","toObj","toPathComponents","fromObj","updateTime","file","readFile","writeResult","writeFile","contents","filename","str","err"],"sourceRoot":""}